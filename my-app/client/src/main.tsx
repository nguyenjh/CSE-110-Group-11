////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// main.tsx
// Code is modified from MongoDB MERN tutorial
//
// Here we create routes for react_router_dom to make our single-page application. We create paths and depending on
// whats on those paths, when we call <App/>, <App/> will display and <Outlet/> will as well if called, 
// and <Outlet/> will be the children components laid out. We also render our router generated by our routes
// starting on "/" as the root.
//
// Assembled by Alex Paz.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

import * as React from "react";
import * as ReactDOM from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
  RouteObject,
} from "react-router-dom";
import App from "./App";
import NoNavbarLayout from "./NoNav";
import { RecipeContextProvider } from "./context/RecipeContext";
import { AccountContextProvider } from "./context/AccountContext";
import { FilterContextProvider } from "./context/FilterContext";
import { RatingContextProvider } from "./context/RatingContext";
import { RecipeFormErrorContextProvider } from "./context/RecipeFormErrorsContext";
import "./index.css";
import RecipeList from "./views/RecipeList";
import PostCreation from "./views/PostCreation";
import RecipeContent from "./views/RecipeContent";
import AccountPage from "./views/AccountPage";
import HomePage from "./views/HomePage";
import LoginPage from "./views/LoginPage";
import SignUp from "./views/SignUp";
import FavoritePage from "./views/FavoritePage";


const routes: RouteObject[] = [
  {
    path: "/",
    element: <App />, 
    children: [
      {
        path: "/",
        element:  <HomePage/>
      },
    ],
  },
  {
    path: "/create",
    element: <App />,
    children: [
      {
        path: "/create",
        element:  <RecipeContextProvider>
                    <RecipeFormErrorContextProvider>
                      <PostCreation />
                    </RecipeFormErrorContextProvider>                 
                  </RecipeContextProvider>,
      },
    ],
  },
  {
    path: "/recipe/:id",
    element: <App />,
    children: [
      {
        path: "/recipe/:id",
        element: 
        <RatingContextProvider>
          <RecipeContent />,
        </RatingContextProvider>

      },
    ],
  },
  {
    path: "/account",
    element: <App />,
    children: [
      {
        path: "/account",
        element: <AccountContextProvider><AccountPage /></AccountContextProvider>
      },
    ],
  },
  {
    path: "/favorite",
    element: <App />,
    children: [
      {
        path: "/favorite",
        element: <FavoritePage />
      },
    ],
  } 
];

const routesWithoutNavbar: RouteObject[] = [
  {
    path: "/signup",
    element: <SignUp />, 
  },
  {
    path: "/login",
    element: <LoginPage />, 
  },
];

const router = createBrowserRouter([
  ...routes,
  ...routesWithoutNavbar,
]);

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);